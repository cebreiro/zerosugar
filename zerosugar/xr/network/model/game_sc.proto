syntax = "proto3";

import "option.proto";
import "game.proto";

package zerosugar.xr.network.game.sc;

message EnterGame
{
    option (opcode) = 1000;

    int32 zone_id = 1;

    int32 remote_players_count = 2;
    repeated RemotePlayer remote_players = 3 [(size_element) = "remote_players_count"];
    
    int32 monsters_count = 4;
    repeated Monster monsters = 5 [(size_element) = "monsters_count"];

    Player local_player = 6;
}

message NotifyPlayerActivated
{
    option (opcode) = 1015;
}

// player
message SpawnRemotePlayer // deprecated
{
    option (opcode) = 1001;

    int32 players_count = 1;
    repeated RemotePlayer players = 2 [(size_element) = "players_count"];
}

message AddRemotePlayer
{
    option (opcode) = 5001;

    int32 players_count = 1;
    repeated RemotePlayer players = 2 [(size_element) = "players_count"];
}

message RemoveRemotePlayer
{
    option (opcode) = 1016;

    int32 players_count = 1;
    repeated int64 players = 2 [(size_element) = "players_count"];
}

message RemotePlayerAttack
{
    option (opcode) = 1003;

    int64 id = 1;
    int32 motionId = 2;
    Position position = 3;
    Rotation rotation = 4;
}

message BeAttackedPlayer
{
    option (opcode) = 5002;

    int64 attacker_id = 1;
    int64 attacked_id = 2;
    int32 monster_action_index = 3;
    float attacked_hp = 4;
}

// monster
message SpawnMonster
{
    option (opcode) = 4001;

    int32 monsters_count = 1;
    repeated Monster monsters = 2 [(size_element) = "monsters_count"];
}

message AddMonster
{
    option (opcode) = 4002;

    int32 monsters_count = 1;
    repeated Monster monsters = 2 [(size_element) = "monsters_count"];
}

message RemoveMonster
{
    option (opcode) = 4003;

    int32 monsters_count = 1;
    repeated int64 monsters = 2 [(size_element) = "monsters_count"];
}

message BattleTransitionMonster
{
    option (opcode) = 4004;

    int64 id = 1;
    Position position = 2;
    Rotation rotation = 3;
}

message MoveMonster
{
    option (opcode) = 4005;

    int64 id = 1;
    Position position = 2;
    Rotation rotation = 3;
}

message AttackMonster
{
    option (opcode) = 4006;

    int64 id = 1;
    int32 action_index = 2;
    Position position = 3;
    Rotation rotation = 4;
    Position dest_position = 5;
    double dest_movement_duration = 6;
}

message BeAttackedMonster
{
    option (opcode) = 5003;

    int64 attacker_id = 1;
    int64 attacked_id = 2;
    float attacked_hp = 3;
}

// movement
message MoveRemotePlayer
{
    option (opcode) = 1007;

    int64 id = 1;
    Position position = 2;
    Rotation rotation = 3;
}

message StopRemotePlayer
{
    option (opcode) = 1020;

    int64 id = 1;
    Position position = 2;
}

message SprintRemotePlayer
{
    option (opcode) = 1021;

    int64 id = 1;
}

message RollDodgeRemotePlayer
{
    option (opcode) = 1004;

    int64 id = 1;
    Rotation rotation = 2;
}

// chat
message NotifyChattingMessage
{
    option (opcode) = 1014;

    int32 type = 1;
    string message = 2;
}

// inventory
message AddInventory
{
    option (opcode) = 2001;

    int32 items_count = 1;
    repeated PlayerInventoryItem items = 2 [(size_element) = "items_count"];
}

message RemoveInventory
{
    option (opcode) = 2002;

    int32 slots_count = 1;
    repeated int32 slots = 2 [(size_element) = "slots_count"];
}

message NotifySwapItemResult
{
    option (opcode) = 2003;

    bool src_equipment = 1;
    bool src_has_item = 2;
    PlayerInventoryItem src_item = 3;
    bool dest_equipment = 4;
    bool dest_has_item = 5;
    PlayerInventoryItem dest_item = 6;
}

message ChangeRemotePlayerEquipItem
{
    option (opcode) = 1026;

    int64 id = 1;
    int32 equip_position = 2;
    int32 item_id = 3;
}

// dungeon match
message NotifyDungeonMatchGroupCreation
{
    option (opcode) = 1012;
}

message NotifyDungeonMatchFailure
{
    option (opcode) = 1013;
}

message NotifyDungeonMatchGroupApproved
{
    option (opcode) = 3001;

    string ip = 1;
    int32 port = 2;
}
